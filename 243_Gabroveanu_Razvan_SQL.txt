---Secvente---
create sequence SEQ_CARTE
increment by 1 
start with 1 
maxvalue 99999
minvalue 1 
nocycle 
nocache; 

create sequence SEQ_AUTOR
increment by 1 
start with 1 
maxvalue 9999
minvalue 1 
nocycle 
nocache; 

create sequence SEQ_CATEGORIE
increment by 1 
start with 1 
maxvalue 999
minvalue 1 
nocycle 
nocache; 

create sequence SEQ_EXEMPLAR_CARTE
increment by 1 
start with 1 
maxvalue 999999
minvalue 1 
nocycle 
nocache; 

create sequence SEQ_EDITURA
increment by 1 
start with 1 
maxvalue 999
minvalue 1 
nocycle 
nocache; 

create sequence SEQ_IMPRUMUT
increment by 1 
start with 1 
maxvalue 9999999
minvalue 1 
nocycle 
nocache; 

create sequence SEQ_BIBLIOTECAR
increment by 1 
start with 1 
maxvalue 999
minvalue 1 
nocycle 
nocache; 

create sequence SEQ_CITITOR
increment by 1 
start with 1 
maxvalue 999999
minvalue 1 
nocycle 
nocache; 

create sequence SEQ_CARTE_AUTOR
increment by 1 
start with 1 
maxvalue 999999
minvalue 1 
nocycle 
nocache; 

create sequence SEQ_CARTE_CATEGORIE
increment by 1 
start with 1 
maxvalue 999999
minvalue 1 
nocycle 
nocache; 

create sequence SEQ_CARTE_CITITOR
increment by 1 
start with 1 
maxvalue 9999999
minvalue 1 
nocycle 
nocache; 

---Creare---
create table CARTE(
    ID_CARTE NUMBER(5),
    TITLU_CARTE VARCHAR(50),
    ID_EXEMPLAR NUMBER(6) CONSTRAINT NN_CARTE_ID_EXEMPLAR NOT NULL
    
    CONSTRAINT PK_CARTE PRIMARY KEY(ID_CARTE)
);


CREATE TABLE AUTOR (
    ID_AUTOR NUMBER(4),
    NUME_AUTOR VARCHAR2(20) CONSTRAINT NN_NUME_AUTOR NOT NULL,
    PRENUME_AUTOR VARCHAR2(30),
    
    CONSTRAINT PK_AUTOR PRIMARY KEY(ID_AUTOR),
    CONSTRAINT U_NUME_PRENUME_AUTOR UNIQUE(NUME_AUTOR, PRENUME_AUTOR)
);

CREATE TABLE CATEGORIE (
    ID_CATEGORIE NUMBER(3),
    NUME_CATEGORIE VARCHAR2(20) CONSTRAINT NN_NUME_CATEGORIE NOT NULL,

    CONSTRAINT PK_CATEGORIE PRIMARY KEY(ID_CATEGORIE)
);

CREATE TABLE EDITURA(
    ID_EDITURA NUMBER(3),
    NUME_EDITURA VARCHAR2(30) CONSTRAINT NN_NUME_EDITURA NOT NULL,
     
    CONSTRAINT PK_EDITURA PRIMARY KEY(ID_EDITURA)
);

CREATE TABLE CARTE(
    ID_CARTE NUMBER(5),
    TITLU_CARTE VARCHAR2(50) CONSTRAINT NN_TITLU_CARTE NOT NULL,
    
    CONSTRAINT PK_CARTE PRIMARY KEY(ID_CARTE)
);

CREATE TABLE BIBLIOTECAR(
    ID_BIBLIOTECAR NUMBER(3),
    NUME_BIBLIOTECAR VARCHAR2(20) CONSTRAINT NN_NUME_BIBLIOTECAR NOT NULL,
    PRENUME_BIBLIOTECAR VARCHAR2(30), 
    NUMAR_TELEFON_BIBLIOTECAR CHAR(10),
    EMAIL_BIBLIOTECAR VARCHAR2(50),
    
    CONSTRAINT PK_BIBLIOTECAR PRIMARY KEY(ID_BIBLIOTECAR),
    CONSTRAINT U_NUME_PRENUME_BIBLIOTECAR UNIQUE(NUME_BIBLIOTECAR, PRENUME_BIBLIOTECAR)
);

CREATE TABLE CITITOR(
    ID_CITITOR NUMBER(3),
    NUME_CITITOR VARCHAR2(20) CONSTRAINT NN_NUME_CITITOR NOT NULL,
    PRENUME_CITITOR VARCHAR2(30), 
    NUMAR_TELEFON_CITITOR CHAR(10),
    EMAIL_CITITOR VARCHAR2(50),
    
    CONSTRAINT PK_CITITOR PRIMARY KEY(ID_CITITOR),
    CONSTRAINT U_NUME_PRENUME_CITITOR UNIQUE(NUME_CITITOR, PRENUME_CITITOR)
);


CREATE TABLE CARTE_AUTOR (
    ID_CARTE_AUTOR NUMBER(6),
    ID_CARTE NUMBER(5) NOT NULL,
    ID_AUTOR NUMBER(4) NOT NULL,    
    
    CONSTRAINT PK_CARTE_AUTOR PRIMARY KEY (ID_CARTE_AUTOR),
    CONSTRAINT U_ID_CARTE_AUTOR UNIQUE (ID_CARTE, ID_AUTOR),
    CONSTRAINT FK_AUTOR FOREIGN KEY (ID_AUTOR) REFERENCES AUTOR (ID_AUTOR) ON DELETE CASCADE,
    CONSTRAINT FK_CARTE_AUTOR FOREIGN KEY (ID_CARTE) REFERENCES CARTE (ID_CARTE) ON DELETE CASCADE
);



CREATE TABLE CARTE_CATEGORIE (
    ID_CARTE_CATEGORIE NUMBER(6),
    ID_CARTE NUMBER(5) NOT NULL,
    ID_CATEGORIE NUMBER(3) NOT NULL,    
    
    CONSTRAINT PK_CARTE_CATEGORIE PRIMARY KEY (ID_CARTE_CATEGORIE),
    CONSTRAINT U_ID_CARTE_CATEGORIE UNIQUE (ID_CARTE, ID_CATEGORIE),
    CONSTRAINT FK_CATEGORIE FOREIGN KEY (ID_CATEGORIE) REFERENCES CATEGORIE (ID_CATEGORIE) ON DELETE CASCADE,
    CONSTRAINT FK_CARTE_CATEGORIE FOREIGN KEY (ID_CARTE) REFERENCES CARTE (ID_CARTE) ON DELETE CASCADE
);

CREATE TABLE EXEMPLAR_CARTE(
    ID_EXEMPLAR NUMBER(6),
    ID_CARTE NUMBER(5) NOT NULL,
    ID_EDITURA NUMBER(3),
    AN_PUBLICATIE NUMBER(4),
    
    CONSTRAINT PK_EXEMPLAR_CARTE PRIMARY KEY(ID_EXEMPLAR),
    CONSTRAINT FK_EXEMPLAR_CARTE_CARTE FOREIGN KEY(ID_CARTE) REFERENCES CARTE(ID_CARTE),
    CONSTRAINT FK_EXEMPLAR_CARTE_EDITURA FOREIGN KEY(ID_EDITURA) REFERENCES EDITURA(ID_EDITURA) ON DELETE SET NULL
);

CREATE TABLE INFO_IMPRUMUT(
    ID_IMPRUMUT NUMBER(7),
    ID_EXEMPLAR NUMBER(6) NOT NULL,
    ID_CITITOR NUMBER(6) NOT NULL,
    ID_BIBLIOTECAR NUMBER(3) NOT NULL,
    DATA_IMPRUMUT DATE DEFAULT SYSDATE NOT NULL, 
    DATA_RETUR DATE,
    
    CONSTRAINT PK_IMPRUMUT PRIMARY KEY(ID_IMPRUMUT),
    CONSTRAINT FK_IMPRUMUT_EXEMPLAR FOREIGN KEY(ID_EXEMPLAR) REFERENCES EXEMPLAR_CARTE(ID_EXEMPLAR),
    CONSTRAINT FK_IMPRUMUT_CITITOR FOREIGN KEY(ID_CITITOR) REFERENCES CITITOR(ID_CITITOR),
    CONSTRAINT FK_IMPRUMUT_BIBLIOTECAR FOREIGN KEY(ID_BIBLIOTECAR) REFERENCES BIBLIOTECAR(ID_BIBLIOTECAR) ON DELETE SET NULL
);
CREATE TABLE CARTE_CITITOR (
    ID_CARTE_CITITOR NUMBER(7),
    ID_EXEMPLAR NUMBER(6) NOT NULL,
    ID_CITITOR NUMBER(6) NOT NULL,
    ID_IMPRUMUT NUMBER(7) NOT NULL,
    
    CONSTRAINT PK_CARTE_CITITOR PRIMARY KEY (ID_CARTE_CITITOR),
    CONSTRAINT FK_CITITOR_CARTE FOREIGN KEY (ID_CITITOR) REFERENCES CITITOR (ID_CITITOR) ,
    CONSTRAINT FK_CARTE_CITITOR FOREIGN KEY (ID_EXEMPLAR) REFERENCES EXEMPLAR_CARTE (ID_EXEMPLAR),
    CONSTRAINT FK_CARTE_CITITOR_IMPRUMUT FOREIGN KEY(ID_IMPRUMUT) REFERENCES INFO_IMPRUMUT(ID_IMPRUMUT),
    CONSTRAINT U_ID_IMPRUMUT UNIQUE(ID_IMPRUMUT)
);
DROP TABLE CARTE_CITITOR;


---Insertii---


---INSERARI CARTE---
INSERT INTO CARTE 
VALUES(SEQ_CARTE.NEXTVAL,'The Lord of the Rings');
INSERT INTO CARTE 
VALUES(SEQ_CARTE.NEXTVAL,'The Girl with the Dragon Tattoo');
INSERT INTO CARTE 
VALUES(SEQ_CARTE.NEXTVAL,'Good Omens');
INSERT INTO CARTE 
VALUES(SEQ_CARTE.NEXTVAL,'The Talisman');
INSERT INTO CARTE 
VALUES(SEQ_CARTE.NEXTVAL,'The Illuminatus! Trilogy');
INSERT INTO CARTE 
VALUES(SEQ_CARTE.NEXTVAL,'Carte7');
commit;
INSERT INTO CARTE 
VALUES(SEQ_CARTE.NEXTVAL,'Carte8');
commit;
---INSERARI AUTORI---

-- Inserting J.R.R. Tolkien
INSERT INTO AUTOR 
VALUES (SEQ_AUTOR.NEXTVAL, 'Tolkien', 'J.R.R.');
COMMIT;

INSERT INTO AUTOR
VALUES (SEQ_AUTOR.NEXTVAL, 'Necunoscut', 'Necunoscut');
Commit;

-- Inserting Stieg Larsson
INSERT INTO AUTOR 
VALUES (SEQ_AUTOR.NEXTVAL, 'Larsson', 'Stieg');
COMMIT;
-- Inserting Terry Pratchett and Neil Gaiman
INSERT INTO AUTOR 
VALUES (SEQ_AUTOR.NEXTVAL, 'Pratchett', 'Terry');
COMMIT;
INSERT INTO AUTOR 
VALUES (SEQ_AUTOR.NEXTVAL, 'Gaiman', 'Neil');
COMMIT;
-- Inserting Stephen King and Peter Straub
INSERT INTO AUTOR 
VALUES (SEQ_AUTOR.NEXTVAL, 'King', 'Stephen');
COMMIT;
INSERT INTO AUTOR 
VALUES (SEQ_AUTOR.NEXTVAL, 'Straub', 'Peter');
COMMIT;
-- Inserting Robert Shea and Robert Anton Wilson
INSERT INTO AUTOR 
VALUES (SEQ_AUTOR.NEXTVAL, 'Shea', 'Robert');
COMMIT;
INSERT INTO AUTOR 
VALUES (SEQ_AUTOR.NEXTVAL, 'Wilson', 'Robert Anton');
COMMIT;
INSERT INTO AUTOR 
VALUES (SEQ_AUTOR.NEXTVAL, 'A_Nume10', 'A_Prenume10');
COMMIT;
INSERT INTO AUTOR 
VALUES (SEQ_AUTOR.NEXTVAL, 'A_Nume11', 'A_Prenume11');
COMMIT;
---CARTE_AUTOR---
INSERT INTO CARTE_AUTOR
VALUES (SEQ_CARTE_AUTOR.NEXTVAL,7,11);
COMMIT;
INSERT INTO CARTE_AUTOR
VALUES (SEQ_CARTE_AUTOR.NEXTVAL,8,10);
COMMIT;
INSERT INTO CARTE_AUTOR
VALUES (SEQ_CARTE_AUTOR.NEXTVAL,1,1);
COMMIT;
INSERT INTO CARTE_AUTOR
VALUES (SEQ_CARTE_AUTOR.NEXTVAL,3,2);
COMMIT;
INSERT INTO CARTE_AUTOR
VALUES (SEQ_CARTE_AUTOR.NEXTVAL,2,8);
COMMIT;
INSERT INTO CARTE_AUTOR
VALUES (SEQ_CARTE_AUTOR.NEXTVAL,2,5);
COMMIT;
INSERT INTO CARTE_AUTOR
VALUES (SEQ_CARTE_AUTOR.NEXTVAL,4,3);
COMMIT;
INSERT INTO CARTE_AUTOR
VALUES (SEQ_CARTE_AUTOR.NEXTVAL,4,6);
COMMIT;
INSERT INTO CARTE_AUTOR
VALUES (SEQ_CARTE_AUTOR.NEXTVAL,5,4);
COMMIT;
INSERT INTO CARTE_AUTOR
VALUES (SEQ_CARTE_AUTOR.NEXTVAL,5,7);
COMMIT;
INSERT INTO CARTE_AUTOR
VALUES (SEQ_CARTE_AUTOR.NEXTVAL,6,9);
SELECT C.TITLU_CARTE,A.NUME_AUTOR 
FROM CARTE C JOIN CARTE_AUTOR CA ON C.ID_CARTE=CA.ID_CARTE
JOIN AUTOR A ON A.ID_AUTOR=CA.ID_AUTOR; 


---BIBLIOTECAR---
INSERT INTO BIBLIOTECAR 
VALUES (SEQ_BIBLIOTECAR.NEXTVAL,'B_Nume1', 'B_Prenume1', '0734567890', 'bibliotecar1@example.com');
COMMIT;
INSERT INTO BIBLIOTECAR 
VALUES (SEQ_BIBLIOTECAR.NEXTVAL,'B_Nume2', 'B_Prenume2', '0734567891', 'bibliotecar2@example.com');
COMMIT;
INSERT INTO BIBLIOTECAR 
VALUES (SEQ_BIBLIOTECAR.NEXTVAL,'B_Nume3', 'B_Prenume3', '0734567892', 'bibliotecar3@example.com');
COMMIT;
INSERT INTO BIBLIOTECAR 
VALUES (SEQ_BIBLIOTECAR.NEXTVAL,'B_Nume4', 'B_Prenume4', '0734567893', 'bibliotecar4@example.com');
COMMIT;
INSERT INTO BIBLIOTECAR 
VALUES (SEQ_BIBLIOTECAR.NEXTVAL,'B_Nume5', 'B_Prenume5', '0734567894', 'bibliotecar5@example.com');
COMMIT;
INSERT INTO BIBLIOTECAR 
VALUES (SEQ_BIBLIOTECAR.NEXTVAL,'B_Nume6', 'B_Prenume6', '0734535494', 'bibliotecar6@example.com');
COMMIT;
---CITITOR---

INSERT INTO CITITOR 
VALUES (SEQ_CITITOR.NEXTVAL, 'C_Nume1', 'C_Prenume1', '0798765432', 'cititor1@example.com');
COMMIT;
INSERT INTO CITITOR 
VALUES (SEQ_CITITOR.NEXTVAL, 'C_Nume2', 'C_Prenume2', '0787654321', 'cititor2@example.com');
COMMIT;
INSERT INTO CITITOR 
VALUES (SEQ_CITITOR.NEXTVAL, 'C_Nume3', 'C_Prenume3', '0723456789', 'cititor3@example.com');
COMMIT;
INSERT INTO CITITOR 
VALUES (SEQ_CITITOR.NEXTVAL, 'C_Nume4', 'C_Prenume4', '0798765432', 'cititor4@example.com');
COMMIT;
INSERT INTO CITITOR 
VALUES (SEQ_CITITOR.NEXTVAL, 'C_Nume5', 'C_Prenume5', '0798385435', 'cititor5@example.com');
COMMIT;
INSERT INTO CITITOR
VALUES (SEQ_CITITOR.NEXTVAL, 'C_Nume_Test1', 'C_Prenume_Test2', '0700000000', 'cititor@test.com');
COMMIT;

---EDITURA---

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'All');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Curtea Veche');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Art');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Univers');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Herald');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Corint');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Paralela 45');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Rao');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Humanitas Fiction');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Litera Internațional');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Polirom Fiction');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Tritonic');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Nemira Fiction');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Frontiera');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Vellant');
COMMIT;

INSERT INTO editura (id_editura, nume_editura)
VALUES (SEQ_EDITURA.NEXTVAL, 'Arthur');
commit;
---categorie---

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Ficțiune');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Necunoscut');
Commit;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Non-ficțiune');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Biografii și memorii');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Autobiografii');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Istorie');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Filozofie');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Psihologie');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Știință și tehnologie');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Artă și arhitectură');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Literatură clasică');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Literatură contemporană');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Poezie');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Romane de dragoste');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Mister și suspans');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Science-fiction și fantasy');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Cărți pentru copii și tineri');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Cărți de dezvoltare personală');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Ghiduri de călătorie');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Cărți de afaceri și leadership');
COMMIT;

INSERT INTO categorie (id_categorie, nume_categorie)
VALUES (SEQ_CATEGORIE.NEXTVAL, 'Cărți culinare și gastronomie');
COMMIT;

---carte_categorie---

INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,1,1);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,1,11);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,1,15);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,3,15);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,3,14);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,3,10);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,4,7);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,4,4);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,5,20);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,5,17);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,5,16);
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,5,19);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,2,16);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,2,14);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,2,1);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,2,15);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,6,2);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,6,8);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,6,6);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,7,8);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,7,19);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,8,20);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,8,4);
COMMIT;
INSERT INTO CARTE_CATEGORIE
VALUES (SEQ_CARTE_CATEGORIE.NEXTVAL,8,6);
COMMIT;

---CARTE_EXEMPLAR---
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,1,2,1970);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,1,8,1981);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,1,2,1991);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,1,2,2000);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,1,7,1986);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,1,6,1959);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,1,2,1969);

INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,2,2,2003);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,2,8,1995);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,2,2,1996);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,2,10,2001);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,2,7,1986);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,2,4,1959);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,2,13,1969);

INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,3,1,1990);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,3,1,2001);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,3,4,1996);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,3,7,1980);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,3,5,1986);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,3,4,1970);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,3,10,1999);

INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,4,13,1990);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,4,15,2001);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,4,5,2005);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,4,7,1980);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,4,5,1986);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,4,9,1970);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,4,9,1985);

INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,2,2006);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,7,2010);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,9,2011);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,11,2005);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,15,1999);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,12,1995);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,14,2006);

INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,2,1990);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,7,1980);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,9,2010);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,4,2000);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,1,1999);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,12,1991);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,5,14,2000);

INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,6,2,2006);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,6,7,2010);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,6,9,2011);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,6,11,2005);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,6,15,1999);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,6,12,1995);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,6,14,2006);

INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,7,2,2020);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,7,5,2019);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,7,4,2018);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,7,3,2019);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,7,10,2019);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,7,7,2020);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,7,8,2018);

INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,8,2,1970);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,8,5,1969);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,8,4,1966);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,8,3,1969);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,8,10,1970);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,8,7,1971);
INSERT INTO EXEMPLAR_CARTE
VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,8,8,1962);

---INFO_IMPRUMUT---

INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,17,1,2,TO_DATE('01-01-2023', 'DD-MM-YYYY'),TO_DATE('01-02-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,13,1,3,TO_DATE('01-01-2023', 'DD-MM-YYYY'),TO_DATE('01-02-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,40,1,5,TO_DATE('05-04-2023', 'DD-MM-YYYY'),TO_DATE('05-05-2023', 'DD-MM-YYYY'));


INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,1,2,1,TO_DATE('13-06-2023', 'DD-MM-YYYY'),TO_DATE('14-07-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,7,2,3,TO_DATE('12-11-2023', 'DD-MM-YYYY'),TO_DATE('12-12-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,54,2,4,TO_DATE('23-04-2023', 'DD-MM-YYYY'),TO_DATE('23-05-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,23,2,4,TO_DATE('23-05-2023', 'DD-MM-YYYY'),TO_DATE('23-06-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,33,2,4,TO_DATE('04-07-2023', 'DD-MM-YYYY'),TO_DATE('04-07-2023', 'DD-MM-YYYY'));

INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,1,4,3,TO_DATE('05-12-2023', 'DD-MM-YYYY'),TO_DATE('06-01-2024', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,10,4,3,TO_DATE('08-12-2023', 'DD-MM-YYYY'),TO_DATE('10-01-2024', 'DD-MM-YYYY'));

INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,5,5,1,TO_DATE('13-06-2023', 'DD-MM-YYYY'),TO_DATE('13-06-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,40,5,3,TO_DATE('12-11-2023', 'DD-MM-YYYY'),TO_DATE('12-11-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,44,5,4,TO_DATE('27-04-2023', 'DD-MM-YYYY'),TO_DATE('27-04-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,1,5,4,TO_DATE('23-05-2023', 'DD-MM-YYYY'),TO_DATE('23-06-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,2,5,5,TO_DATE('04-10-2023', 'DD-MM-YYYY'),TO_DATE('04-10-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,22,5,1,TO_DATE('10-06-2023', 'DD-MM-YYYY'),TO_DATE('10-06-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,20,5,3,TO_DATE('01-08-2023', 'DD-MM-YYYY'),TO_DATE('01-08-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,15,5,4,TO_DATE('09-03-2023', 'DD-MM-YYYY'),TO_DATE('09-03-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,30,5,1,TO_DATE('23-07-2023', 'DD-MM-YYYY'),TO_DATE('23-07-2023', 'DD-MM-YYYY'));
INSERT INTO INFO_IMPRUMUT
values(SEQ_IMPRUMUT.NEXTVAL,63,5,2,TO_DATE('09-09-2023', 'DD-MM-YYYY'),TO_DATE('09-09-2023', 'DD-MM-YYYY'));









--6
CREATE OR REPLACE PROCEDURE afis_carti

IS
        -- declarare colectii
        TYPE nume_exemplar IS TABLE OF EXEMPLAR_CARTE%ROWTYPE INDEX BY VARCHAR2(50);
        TYPE index_exemplar IS TABLE OF EXEMPLAR_CARTE%ROWTYPE;
        TYPE id_cinci IS VARRAY(5) OF CARTE.ID_CARTE%TYPE;

        -- declarare variabile
        c_carte_exemplare nume_exemplar;
        c_exemplare index_exemplar := index_exemplar();
        c_id_carti id_cinci := id_cinci();

        -- variabile intermediare
        v_titlu_curent CARTE.TITLU_CARTE%TYPE;
        v_iterator VARCHAR2(50);
BEGIN

        -- se selcteaza primele 5 id uri
        select ID_CARTE
        BULK COLLECT INTO c_id_carti
        from CARTE
        where ROWNUM<6
        order by ID_CARTE;


        FOR i in c_id_carti.first..c_id_carti.last LOOP
            c_exemplare.extend;

            -- se selecteaza un exemplar si se adauga in table
            select *
            into c_exemplare(c_exemplare.last)
            from EXEMPLAR_CARTE
            where ID_CARTE = c_id_carti(i) AND ROWNUM<2;

            -- se salveaza titlul cartii curente in variabila
            select TITLU_CARTE
            into v_titlu_curent
            from CARTE
            where ID_CARTE = c_id_carti(i);

            -- se insereaza in dictionar
            c_carte_exemplare(v_titlu_curent) := c_exemplare(c_exemplare.LAST);

        END LOOP;

        -- afisare

        -- se itereaza folosind o variabila de tipul varchar
        v_iterator := c_carte_exemplare.FIRST;

        WHILE v_iterator IS NOT NULL LOOP
            DBMS_OUTPUT.PUT_LINE(v_iterator || ' : ' || c_carte_exemplare(v_iterator).AN_PUBLICATIE);
            v_iterator := c_carte_exemplare.NEXT(v_iterator);

        END LOOP;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('Nu exista date!');
            WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Alta eroare!');
END;
/
BEGIN
    afis_carti();
end;


--7 

CREATE OR REPLACE PROCEDURE imprumuturi_carte (v_id_carte_curenta CARTE.ID_CARTE%TYPE)
IS
    -- folosit pentru a tine numararea de imprumuturi
    v_index NUMBER :=0;

    -- cursor pentru a selecta exemplarele cu id_ul de carte dat
    CURSOR C_CARTI (v_id_carte_selectata CARTE.ID_CARTE%TYPE) IS
        SELECT ID_EXEMPLAR
        FROM EXEMPLAR_CARTE
        WHERE ID_CARTE = v_id_carte_selectata;

BEGIN
    -- iterare prin cursor
    FOR EXEMPLAR IN C_CARTI(v_id_carte_curenta)

    LOOP
        --Cursor cu subcerere pentru a obtine imprumuturile cerute
    FOR IMPRUMUT IN (SELECT *
                     FROM INFO_IMPRUMUT I_F
                     WHERE EXEMPLAR.ID_EXEMPLAR = I_F.ID_EXEMPLAR AND I_F.DATA_IMPRUMUT < SYSDATE)
        LOOP
            v_index:= v_index+1;
            DBMS_OUTPUT.PUT_LINE('Imprumut ' || v_index);
            DBMS_OUTPUT.PUT_LINE('Data imprumut:  ' || IMPRUMUT.DATA_IMPRUMUT);
            DBMS_OUTPUT.PUT_LINE('Data retur:  ' || IMPRUMUT.DATA_RETUR);
        END LOOP;
    END LOOP;

END;
/
BEGIN
    imprumuturi_carte(1);
end;






select *
from carte c join EXEMPLAR_CARTE e_c on e_c.ID_CARTE = c.ID_CARTE join INFO_IMPRUMUT i_f on i_f.ID_EXEMPLAR = e_c.ID_EXEMPLAR
where c.ID_CARTE = 1


--8
CREATE OR REPLACE FUNCTION NUMAR_CARTI(string_data_imprumut VARCHAR2,string_data_retur VARCHAR2) RETURN NUMBER IS

        INVALID_DATA EXCEPTION;
        WRONG_DATA_FORMAT EXCEPTION;

        v_data_imprumut DATE;
        v_data_retur DATE;

        v_numar_carti NUMBER :=0;

    BEGIN

        -- Convertire date si tratare exceptii
        IF LENGTH(string_data_imprumut) <> 10 OR LENGTH(string_data_retur) <> 10 THEN
            RAISE WRONG_DATA_FORMAT;
        END IF;

        v_data_imprumut := TRUNC(to_date(string_data_imprumut,'DD-MM-YYYY'));
        v_data_retur := TRUNC(to_date(string_data_retur,'DD-MM-YYYY'));

        IF v_data_retur <= v_data_imprumut THEN
            RAISE INVALID_DATA;
        END IF;

        -- se selecteaza numarul de carti distincte
        SELECT COUNT(DISTINCT(ID_CARTE))
        INTO v_numar_carti
        FROM CARTE, (SELECT ID_EXEMPLAR AS ID
                     FROM INFO_IMPRUMUT
                     WHERE TRUNC(DATA_RETUR)<= v_data_retur AND TRUNC(DATA_IMPRUMUT)>= v_data_imprumut) DATA

        WHERE DATA.ID IN ( SELECT C_E.ID_EXEMPLAR
                           FROM EXEMPLAR_CARTE C_E
                           WHERE ID_CARTE = C_E.ID_CARTE);

    return v_numar_carti;

    EXCEPTION
        WHEN INVALID_DATA THEN
            DBMS_OUTPUT.PUT_LINE('Invalid Data');
            return -1;
        WHEN WRONG_DATA_FORMAT THEN
            DBMS_OUTPUT.PUT_LINE('Wrong format');
            return -1;

    END;
/

declare
   i number;


begin
   -- ca cand subprogramul ruleaza
   i := NUMAR_CARTI('01-01-2022','01-02-2024');
   DBMS_OUTPUT.PUT_LINE(i);


   -- caz data invalida
   i:= NUMAR_CARTI('01-01-2022','01-02-2021');
   DBMS_OUTPUT.PUT_LINE(i);
   -- caz formatare gresita
   i:= NUMAR_CARTI('1-01-2022','01-02-20212');
   DBMS_OUTPUT.PUT_LINE(i);
end;





--9
CREATE OR REPLACE PROCEDURE FIND_CATEG (v_numar_carti NUMBER) IS
    -- declarare variabile
    v_denumire_categorie CATEGORIE.NUME_CATEGORIE%TYPE;
    v_id_categorie CATEGORIE.ID_CATEGORIE%TYPE;
    v_count NUMBER := 0;
BEGIN
    -- pentru fiecare id de categorie se numara cate carti exista
    -- se mai apeleaza count pentru a determina cate categorii cu numarul respectiv exista
    SELECT count(count(*))
        INTO v_count
        FROM CATEGORIE JOIN CARTE_CATEGORIE ON CATEGORIE.ID_CATEGORIE = CARTE_CATEGORIE.ID_CATEGORIE
                       JOIN CARTE ON CARTE_CATEGORIE.ID_CARTE = CARTE.ID_CARTE
                       JOIN EXEMPLAR_CARTE ON CARTE.ID_CARTE = EXEMPLAR_CARTE.ID_CARTE
                       JOIN INFO_IMPRUMUT ON EXEMPLAR_CARTE.ID_EXEMPLAR = INFO_IMPRUMUT.ID_EXEMPLAR
        GROUP BY CATEGORIE.ID_CATEGORIE
        HAVING COUNT(CATEGORIE.ID_CATEGORIE) = v_numar_carti;

    IF v_count>1 THEN
        RAISE TOO_MANY_ROWS;
    END IF;

    SELECT CATEGORIE.ID_CATEGORIE,CATEGORIE.NUME_CATEGORIE
    INTO v_id_categorie,v_denumire_categorie
    FROM CATEGORIE WHERE CATEGORIE.ID_CATEGORIE = (
        SELECT CATEGORIE.ID_CATEGORIE
        FROM CATEGORIE JOIN CARTE_CATEGORIE ON CATEGORIE.ID_CATEGORIE = CARTE_CATEGORIE.ID_CATEGORIE
                       JOIN CARTE ON CARTE_CATEGORIE.ID_CARTE = CARTE.ID_CARTE
                       JOIN EXEMPLAR_CARTE ON CARTE.ID_CARTE = EXEMPLAR_CARTE.ID_CARTE
                       JOIN INFO_IMPRUMUT ON EXEMPLAR_CARTE.ID_EXEMPLAR = INFO_IMPRUMUT.ID_EXEMPLAR
        GROUP BY CATEGORIE.ID_CATEGORIE
        HAVING COUNT(CATEGORIE.ID_CATEGORIE) = v_numar_carti
        );

    DBMS_OUTPUT.PUT_LINE('Categoria cu id-ul: ' || v_id_categorie);
    DBMS_OUTPUT.PUT_LINE('Denumire categorie: ' || v_denumire_categorie);


    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nu exista categorii cu proprietatea ceruta');
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Exista mai multe categorii cu proprietatea ceruta');

END;

BEGIN
    FIND_CATEG(10);
    FIND_CATEG(3);
    FIND_CATEG(20);
END;

--10
CREATE OR REPLACE TRIGGER MODIFICA_IMPRUMUT
    BEFORE INSERT OR UPDATE OR DELETE ON INFO_IMPRUMUT
DECLARE
    V_ZIUA NUMBER;

BEGIN

    SELECT EXTRACT(DAY FROM SYSDATE) INTO V_ZIUA FROM DUAL;

    IF MOD(V_ZIUA,2) = 0 THEN
        RAISE_APPLICATION_ERROR(-20002,'Imprumuturile nu pot fi modificate in zile pare');
    END IF;
END;

DECLARE
    V_ID_IMPRUMUT NUMBER;
BEGIN

    SELECT ID_IMPRUMUT
    INTO V_ID_IMPRUMUT
    FROM INFO_IMPRUMUT
    WHERE ROWNUM < 2;

    DELETE FROM INFO_IMPRUMUT WHERE ID_IMPRUMUT = V_ID_IMPRUMUT;

END;

DROP TRIGGER MODIFICA_IMPRUMUT;




--11
CREATE OR REPLACE TRIGGER AN_EXEMPLAR
    BEFORE UPDATE ON EXEMPLAR_CARTE
    FOR EACH ROW
BEGIN
    IF :NEW.AN_PUBLICATIE <> :OLD.AN_PUBLICATIE THEN
        RAISE_APPLICATION_ERROR(-20001,'Anul publicatiei unui exemplar nu poate fi modificat');
    END IF;
END;

DECLARE
    V_ID_EXEMPLAR EXEMPLAR_CARTE.ID_EXEMPLAR%TYPE;
BEGIN

    select ID_EXEMPLAR
    into V_ID_EXEMPLAR
    from EXEMPLAR_CARTE
    where ROWNUM <2;


    UPDATE EXEMPLAR_CARTE
    SET AN_PUBLICATIE = 1900
    WHERE ID_EXEMPLAR = V_ID_EXEMPLAR;
END;

DROP TRIGGER AN_EXEMPLAR;


--12
CREATE OR REPLACE TRIGGER NO_ALTER_TRIGGER
    BEFORE ALTER OR DROP ON SCHEMA

BEGIN
        RAISE_APPLICATION_ERROR(-20003,'Stergerea sau alterarea tabelelor nu este permisa');
END;

DROP TABLE EXEMPLAR;

DROP TRIGGER NO_ALTER_TRIGGER;


--13
CREATE OR REPLACE PACKAGE PACHET_PROIECT IS
    PROCEDURE afis_carti;
    PROCEDURE imprumuturi_carte (v_id_carte_curenta CARTE.ID_CARTE%TYPE);
    FUNCTION NUMAR_CARTI(string_data_imprumut VARCHAR2,string_data_retur VARCHAR2) RETURN NUMBER;
    PROCEDURE FIND_CATEG (v_numar_carti NUMBER);

END PACHET_PROIECT;

CREATE OR REPLACE PACKAGE BODY PACHET_PROIECT IS
    -- EX 6
    PROCEDURE afis_carti

    IS
            -- declarare colectii
            TYPE nume_exemplar IS TABLE OF EXEMPLAR_CARTE%ROWTYPE INDEX BY VARCHAR2(50);
            TYPE index_exemplar IS TABLE OF EXEMPLAR_CARTE%ROWTYPE;
            TYPE id_cinci IS VARRAY(5) OF CARTE.ID_CARTE%TYPE;

            -- declarare variabile
            c_carte_exemplare nume_exemplar;
            c_exemplare index_exemplar := index_exemplar();
            c_id_carti id_cinci := id_cinci();

            -- variabile intermediare
            v_titlu_curent CARTE.TITLU_CARTE%TYPE;
            v_iterator VARCHAR2(50);
    BEGIN

            -- se selcteaza primele 5 id uri
            select ID_CARTE
            BULK COLLECT INTO c_id_carti
            from CARTE
            where ROWNUM<6
            order by ID_CARTE;


            FOR i in c_id_carti.first..c_id_carti.last LOOP
                c_exemplare.extend;

                -- se selecteaza un exemplar si se adauga in table
                select *
                into c_exemplare(c_exemplare.last)
                from EXEMPLAR_CARTE
                where ID_CARTE = c_id_carti(i) AND ROWNUM<2;

                -- se salveaza titlul cartii curente in variabila
                select TITLU_CARTE
                into v_titlu_curent
                from CARTE
                where ID_CARTE = c_id_carti(i);

                -- se insereaza in dictionar
                c_carte_exemplare(v_titlu_curent) := c_exemplare(c_exemplare.LAST);

            END LOOP;

            -- afisare

            -- se itereaza folosind o variabila de tipul varchar
            v_iterator := c_carte_exemplare.FIRST;

            WHILE v_iterator IS NOT NULL LOOP
                DBMS_OUTPUT.PUT_LINE(v_iterator || ' : ' || c_carte_exemplare(v_iterator).AN_PUBLICATIE);
                v_iterator := c_carte_exemplare.NEXT(v_iterator);

            END LOOP;

            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    DBMS_OUTPUT.PUT_LINE('Nu exista date!');
                WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Alta eroare!');
    END afis_carti;

    -- EX 7
    PROCEDURE imprumuturi_carte (v_id_carte_curenta CARTE.ID_CARTE%TYPE)
    IS
        -- folosit pentru a tine numararea de imprumuturi
        v_index NUMBER :=0;

        -- cursor pentru a selecta exemplarele cu id_ul de carte dat
        CURSOR C_CARTI (v_id_carte_selectata CARTE.ID_CARTE%TYPE) IS
            SELECT ID_EXEMPLAR
            FROM EXEMPLAR_CARTE
            WHERE ID_CARTE = v_id_carte_selectata;

    BEGIN
        -- iterare prin cursor
        FOR EXEMPLAR IN C_CARTI(v_id_carte_curenta)

        LOOP
            --Cursor cu subcerere pentru a obtine imprumuturile cerute
        FOR IMPRUMUT IN (SELECT *
                         FROM INFO_IMPRUMUT I_F
                         WHERE EXEMPLAR.ID_EXEMPLAR = I_F.ID_EXEMPLAR AND I_F.DATA_IMPRUMUT < SYSDATE)
            LOOP
                v_index:= v_index+1;
                DBMS_OUTPUT.PUT_LINE('Imprumut ' || v_index);
                DBMS_OUTPUT.PUT_LINE('Data imprumut:  ' || IMPRUMUT.DATA_IMPRUMUT);
                DBMS_OUTPUT.PUT_LINE('Data retur:  ' || IMPRUMUT.DATA_RETUR);
            END LOOP;
        END LOOP;

    END imprumuturi_carte;

    -- EX 8
    FUNCTION NUMAR_CARTI(string_data_imprumut VARCHAR2,string_data_retur VARCHAR2) RETURN NUMBER IS

        INVALID_DATA EXCEPTION;
        WRONG_DATA_FORMAT EXCEPTION;

        v_data_imprumut DATE;
        v_data_retur DATE;

        v_numar_carti NUMBER :=0;

    BEGIN

        -- Convertire date si tratare exceptii
        IF LENGTH(string_data_imprumut) <> 10 OR LENGTH(string_data_retur) <> 10 THEN
            RAISE WRONG_DATA_FORMAT;
        END IF;

        v_data_imprumut := TRUNC(to_date(string_data_imprumut,'DD-MM-YYYY'));
        v_data_retur := TRUNC(to_date(string_data_retur,'DD-MM-YYYY'));

        IF v_data_retur <= v_data_imprumut THEN
            RAISE INVALID_DATA;
        END IF;

        -- se selecteaza numarul de carti distincte
        SELECT COUNT(DISTINCT(ID_CARTE))
        INTO v_numar_carti
        FROM CARTE, (SELECT ID_EXEMPLAR AS ID
                     FROM INFO_IMPRUMUT
                     WHERE TRUNC(DATA_RETUR)<= v_data_retur AND TRUNC(DATA_IMPRUMUT)>= v_data_imprumut) DATA

        WHERE DATA.ID IN ( SELECT C_E.ID_EXEMPLAR
                           FROM EXEMPLAR_CARTE C_E
                           WHERE ID_CARTE = C_E.ID_CARTE);

    return v_numar_carti;

    EXCEPTION
        WHEN INVALID_DATA THEN
            DBMS_OUTPUT.PUT_LINE('Invalid Data');
            return -1;
        WHEN WRONG_DATA_FORMAT THEN
            DBMS_OUTPUT.PUT_LINE('Wrong format');
            return -1;

    END NUMAR_CARTI;

    -- EX 9

    PROCEDURE FIND_CATEG (v_numar_carti NUMBER) IS
    -- declarare variabile
    v_denumire_categorie CATEGORIE.NUME_CATEGORIE%TYPE;
    v_id_categorie CATEGORIE.ID_CATEGORIE%TYPE;
    v_count NUMBER := 0;
    BEGIN
    -- pentru fiecare id de categorie se numara cate carti exista
    -- se mai apeleaza count pentru a determina cate categorii cu numarul respectiv exista
    SELECT count(count(*))
        INTO v_count
        FROM CATEGORIE JOIN CARTE_CATEGORIE ON CATEGORIE.ID_CATEGORIE = CARTE_CATEGORIE.ID_CATEGORIE
                       JOIN CARTE ON CARTE_CATEGORIE.ID_CARTE = CARTE.ID_CARTE
                       JOIN EXEMPLAR_CARTE ON CARTE.ID_CARTE = EXEMPLAR_CARTE.ID_CARTE
                       JOIN INFO_IMPRUMUT ON EXEMPLAR_CARTE.ID_EXEMPLAR = INFO_IMPRUMUT.ID_EXEMPLAR
        GROUP BY CATEGORIE.ID_CATEGORIE
        HAVING COUNT(CATEGORIE.ID_CATEGORIE) = v_numar_carti;

    IF v_count>1 THEN
        RAISE TOO_MANY_ROWS;
    END IF;

    SELECT CATEGORIE.ID_CATEGORIE,CATEGORIE.NUME_CATEGORIE
    INTO v_id_categorie,v_denumire_categorie
    FROM CATEGORIE WHERE CATEGORIE.ID_CATEGORIE = (
        SELECT CATEGORIE.ID_CATEGORIE
        FROM CATEGORIE JOIN CARTE_CATEGORIE ON CATEGORIE.ID_CATEGORIE = CARTE_CATEGORIE.ID_CATEGORIE
                       JOIN CARTE ON CARTE_CATEGORIE.ID_CARTE = CARTE.ID_CARTE
                       JOIN EXEMPLAR_CARTE ON CARTE.ID_CARTE = EXEMPLAR_CARTE.ID_CARTE
                       JOIN INFO_IMPRUMUT ON EXEMPLAR_CARTE.ID_EXEMPLAR = INFO_IMPRUMUT.ID_EXEMPLAR
        GROUP BY CATEGORIE.ID_CATEGORIE
        HAVING COUNT(CATEGORIE.ID_CATEGORIE) = v_numar_carti
        );

    DBMS_OUTPUT.PUT_LINE('Categoria cu id-ul: ' || v_id_categorie);
    DBMS_OUTPUT.PUT_LINE('Denumire categorie: ' || v_denumire_categorie);


    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Nu exista categorii cu proprietatea ceruta');
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Exista mai multe categorii cu proprietatea ceruta');

    END FIND_CATEG;

END PACHET_PROIECT;

DECLARE
   i NUMBER;
BEGIN
    --6
    PACHET_PROIECT.afis_carti();
    --7
    PACHET_PROIECT.imprumuturi_carte(1);
    --8
    -- ca cand subprogramul ruleaza
   i := PACHET_PROIECT.NUMAR_CARTI('01-01-2022','01-02-2024');
   DBMS_OUTPUT.PUT_LINE(i);

   -- caz data invalida
   i:= PACHET_PROIECT.NUMAR_CARTI('01-01-2022','01-02-2021');
   DBMS_OUTPUT.PUT_LINE(i);
   -- caz formatare gresita
   i:= PACHET_PROIECT.NUMAR_CARTI('1-01-2022','01-02-20212');
   DBMS_OUTPUT.PUT_LINE(i);
    --9
    FIND_CATEG(10);
    FIND_CATEG(3);
    FIND_CATEG(20);
END;

--14
CREATE OR REPLACE PACKAGE EXEMPLAR_NOU IS

    FUNCTION FIND_EDITURA(v_nume_editura EDITURA.NUME_EDITURA%TYPE) RETURN EDITURA.ID_EDITURA%TYPE;
    FUNCTION FIND_CARTE(v_titlu_carte CARTE.TITLU_CARTE%TYPE) RETURN CARTE.ID_CARTE%TYPE;
    PROCEDURE ADAUGA_CARTE(v_titlu_carte CARTE.TITLU_CARTE%TYPE);
    PROCEDURE ADAUGA_EDITURA(v_nume_editura EDITURA.NUME_EDITURA%TYPE);

    PROCEDURE ADAUGA_EXEMPLAR(v_titlu_carte CARTE.TITLU_CARTE%TYPE,v_nume_editura EDITURA.NUME_EDITURA%TYPE,v_an_publicatie EXEMPLAR_CARTE.AN_PUBLICATIE%TYPE);

END EXEMPLAR_NOU;

CREATE OR REPLACE PACKAGE BODY EXEMPLAR_NOU IS

    v_id_carte_global CARTE.ID_CARTE%TYPE;
    v_id_editura_global EDITURA.ID_EDITURA%TYPE;


    FUNCTION FIND_EDITURA(v_nume_editura EDITURA.NUME_EDITURA%TYPE) RETURN EDITURA.ID_EDITURA%TYPE IS

        v_id_editura EDITURA.ID_EDITURA%TYPE;
    BEGIN

        SELECT ID_EDITURA
        INTO v_id_editura
        FROM EDITURA
        WHERE UPPER(NUME_EDITURA) = TRIM(UPPER(v_nume_editura));

        RETURN v_id_editura;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RETURN -1;

    END FIND_EDITURA;


    FUNCTION FIND_CARTE(v_titlu_carte CARTE.TITLU_CARTE%TYPE) RETURN CARTE.ID_CARTE%TYPE IS
         v_id_carte CARTE.ID_CARTE%TYPE;
         BEGIN

            SELECT ID_CARTE
            INTO v_id_carte
            FROM CARTE
            WHERE UPPER(TITLU_CARTE) = TRIM(UPPER(v_titlu_carte));

            RETURN V_ID_CARTE;

            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RETURN -1;

    END FIND_CARTE;


    PROCEDURE ADAUGA_CARTE(v_titlu_carte CARTE.TITLU_CARTE%TYPE) IS
    BEGIN
        INSERT INTO CARTE
        VALUES(SEQ_CARTE.NEXTVAL,v_titlu_carte);
    END ADAUGA_CARTE;


    PROCEDURE ADAUGA_EDITURA(v_nume_editura EDITURA.NUME_EDITURA%TYPE) IS
    BEGIN
        INSERT INTO editura (id_editura, nume_editura)
        VALUES (SEQ_EDITURA.NEXTVAL, v_nume_editura);
    END ADAUGA_EDITURA;

    PROCEDURE ADAUGA_EXEMPLAR(v_titlu_carte CARTE.TITLU_CARTE%TYPE,v_nume_editura EDITURA.NUME_EDITURA%TYPE,v_an_publicatie EXEMPLAR_CARTE.AN_PUBLICATIE%TYPE) IS
    BEGIN
        v_id_carte_global := FIND_CARTE(v_titlu_carte);
        v_id_editura_global := FIND_EDITURA(v_nume_editura);

        IF v_id_carte_global = -1 THEN
            ADAUGA_CARTE(v_titlu_carte);
            v_id_carte_global := FIND_CARTE(v_titlu_carte);
        END IF;

        IF v_id_editura_global = -1 THEN
            ADAUGA_EDITURA(v_nume_editura);
            v_id_editura_global := FIND_EDITURA(v_nume_editura);
        END IF;

        INSERT INTO EXEMPLAR_CARTE
        VALUES(SEQ_EXEMPLAR_CARTE.NEXTVAL,v_id_carte_global,v_id_editura_global,v_an_publicatie);

    END ADAUGA_EXEMPLAR;

END EXEMPLAR_NOU;

ROLLBACK;

SELECT * FROM EDITURA;

SELECT * FROM CARTE;

select * from EXEMPLAR_CARTE;




